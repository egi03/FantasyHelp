# Generated by Django 4.2.10 on 2025-07-29 13:54

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('singular_name', models.CharField(max_length=20)),
                ('singular_name_short', models.CharField(max_length=3)),
                ('plural_name', models.CharField(max_length=20)),
                ('plural_name_short', models.CharField(max_length=3)),
                ('squad_select', models.PositiveSmallIntegerField(help_text='Number in full squad')),
                ('squad_min_play', models.PositiveSmallIntegerField(help_text='Minimum playing')),
                ('squad_max_play', models.PositiveSmallIntegerField(help_text='Maximum playing')),
            ],
            options={
                'db_table': 'fpl_positions',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='UserTeam',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='When this record was last updated')),
                ('fpl_team_id', models.PositiveIntegerField(db_index=True, help_text='FPL team ID', unique=True)),
                ('team_name', models.CharField(max_length=100)),
                ('manager_name', models.CharField(db_index=True, max_length=100)),
                ('current_event', models.PositiveSmallIntegerField(default=1)),
                ('total_points', models.PositiveIntegerField(db_index=True, default=0, help_text='Total points this season')),
                ('overall_rank', models.PositiveIntegerField(blank=True, help_text='Overall rank', null=True)),
                ('bank_balance', models.DecimalField(decimal_places=1, default=0.0, help_text='Money in bank (millions)', max_digits=4)),
                ('team_value', models.DecimalField(decimal_places=1, default=100.0, help_text='Total team value (millions)', max_digits=6)),
                ('free_transfers', models.PositiveSmallIntegerField(default=1)),
                ('total_transfers', models.PositiveIntegerField(default=0)),
                ('transfer_cost', models.PositiveIntegerField(default=0, help_text='Points deducted for transfers')),
                ('event_points', models.IntegerField(default=0, help_text='Points scored this gameweek')),
                ('event_rank', models.PositiveIntegerField(blank=True, help_text='Rank for current gameweek', null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, db_index=True)),
                ('auto_subs_played', models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                'db_table': 'fpl_user_teams',
                'ordering': ['-total_points'],
                'indexes': [models.Index(fields=['fpl_team_id'], name='fpl_user_te_fpl_tea_eb665b_idx'), models.Index(fields=['manager_name'], name='fpl_user_te_manager_2060c8_idx'), models.Index(fields=['-total_points'], name='fpl_user_te_total_p_60012e_idx'), models.Index(fields=['last_updated'], name='fpl_user_te_last_up_8dc876_idx')],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('fpl_id', models.PositiveIntegerField(help_text='FPL API team ID', unique=True)),
                ('name', models.CharField(db_index=True, help_text='Team name', max_length=50)),
                ('short_name', models.CharField(help_text='Three letter team code', max_length=3)),
                ('code', models.PositiveIntegerField(db_index=True, help_text='Team code for assets', unique=True)),
                ('pulse_id', models.PositiveIntegerField(blank=True, help_text='Pulse ID for news', null=True)),
                ('strength', models.PositiveSmallIntegerField(default=1000, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5000)])),
                ('strength_overall_home', models.PositiveSmallIntegerField(default=1000)),
                ('strength_overall_away', models.PositiveSmallIntegerField(default=1000)),
                ('strength_attack_home', models.PositiveSmallIntegerField(default=1000)),
                ('strength_attack_away', models.PositiveSmallIntegerField(default=1000)),
                ('strength_defence_home', models.PositiveSmallIntegerField(default=1000)),
                ('strength_defence_away', models.PositiveSmallIntegerField(default=1000)),
                ('position', models.PositiveSmallIntegerField(blank=True, help_text='Current league position', null=True)),
            ],
            options={
                'db_table': 'fpl_teams',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['code'], name='fpl_teams_code_206674_idx'), models.Index(fields=['name'], name='fpl_teams_name_7699b5_idx')],
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='When this record was last updated')),
                ('fpl_id', models.PositiveIntegerField(db_index=True, help_text='FPL API player ID', unique=True)),
                ('first_name', models.CharField(max_length=50)),
                ('second_name', models.CharField(db_index=True, max_length=50)),
                ('web_name', models.CharField(db_index=True, help_text='Display name', max_length=50)),
                ('status', models.CharField(choices=[('a', 'Available'), ('d', 'Doubtful'), ('i', 'Injured'), ('n', 'Not available'), ('s', 'Suspended'), ('u', 'Unavailable')], db_index=True, default='a', max_length=1)),
                ('current_price', models.DecimalField(db_index=True, decimal_places=1, help_text='Current price in millions', max_digits=4)),
                ('total_points', models.PositiveIntegerField(db_index=True, default=0, help_text='Season total points')),
                ('form', models.DecimalField(db_index=True, decimal_places=1, default=0.0, help_text='Average points last 5 games', max_digits=4)),
                ('points_per_game', models.DecimalField(db_index=True, decimal_places=2, default=0.0, help_text='Points per game played', max_digits=4)),
                ('selected_by_percent', models.DecimalField(db_index=True, decimal_places=2, default=0.0, help_text='Percentage of teams that own this player', max_digits=5)),
                ('minutes', models.PositiveIntegerField(default=0)),
                ('goals_scored', models.PositiveIntegerField(default=0)),
                ('assists', models.PositiveIntegerField(default=0)),
                ('clean_sheets', models.PositiveIntegerField(default=0)),
                ('goals_conceded', models.PositiveIntegerField(default=0)),
                ('own_goals', models.PositiveIntegerField(default=0)),
                ('penalties_saved', models.PositiveIntegerField(default=0)),
                ('penalties_missed', models.PositiveIntegerField(default=0)),
                ('yellow_cards', models.PositiveIntegerField(default=0)),
                ('red_cards', models.PositiveIntegerField(default=0)),
                ('saves', models.PositiveIntegerField(default=0)),
                ('bonus', models.PositiveIntegerField(default=0)),
                ('bps', models.PositiveIntegerField(default=0, help_text='Bonus Point System score')),
                ('influence', models.DecimalField(decimal_places=1, default=0.0, help_text="Player's impact on team performance", max_digits=5)),
                ('creativity', models.DecimalField(decimal_places=1, default=0.0, help_text="Player's creativity in final third", max_digits=5)),
                ('threat', models.DecimalField(decimal_places=1, default=0.0, help_text="Player's threat in opposition box", max_digits=5)),
                ('ict_index', models.DecimalField(decimal_places=1, default=0.0, help_text='Combined ICT score', max_digits=5)),
                ('expected_goals', models.DecimalField(decimal_places=2, default=0.0, help_text='Expected goals', max_digits=5)),
                ('expected_assists', models.DecimalField(decimal_places=2, default=0.0, help_text='Expected assists', max_digits=5)),
                ('expected_goal_involvements', models.DecimalField(decimal_places=2, default=0.0, help_text='Expected goal involvements', max_digits=5)),
                ('expected_goals_conceded', models.DecimalField(decimal_places=2, default=0.0, help_text='Expected goals conceded', max_digits=5)),
                ('dreamteam_count', models.PositiveIntegerField(default=0, help_text='Times in dream team')),
                ('in_dreamteam', models.BooleanField(default=False, help_text='Currently in dream team')),
                ('news', models.TextField(blank=True, help_text='Latest news about player')),
                ('news_added', models.DateTimeField(blank=True, help_text='When news was added', null=True)),
                ('chance_of_playing_this_round', models.PositiveSmallIntegerField(blank=True, help_text='Chance of playing percentage', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('chance_of_playing_next_round', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('position', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='fpl.position')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='fpl.team')),
            ],
            options={
                'db_table': 'fpl_players',
                'ordering': ['-total_points', '-form'],
            },
        ),
        migrations.CreateModel(
            name='TransferSuggestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='When this record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='When this record was last updated')),
                ('suggestion_type', models.CharField(choices=[('upgrade', 'Upgrade Player'), ('sideways', 'Sideways Move'), ('downgrade', 'Downgrade for Funds'), ('injury', 'Injury Replacement'), ('rotation', 'Rotation Risk'), ('fixture', 'Fixture-based'), ('form', 'Form-based'), ('value', 'Value Play')], db_index=True, default='upgrade', max_length=20)),
                ('reason', models.TextField(help_text='Detailed reasoning for transfer')),
                ('priority_score', models.DecimalField(db_index=True, decimal_places=2, help_text='AI-calculated priority score', max_digits=6)),
                ('cost_change', models.DecimalField(decimal_places=1, help_text='Cost difference (negative = saves money)', max_digits=4)),
                ('predicted_points_gain', models.DecimalField(decimal_places=2, default=0.0, help_text='Expected points improvement over 5 GWs', max_digits=5)),
                ('confidence_score', models.DecimalField(decimal_places=2, default=50.0, help_text='Confidence in suggestion (0-100%)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_implemented', models.BooleanField(default=False, help_text='Whether user made this transfer')),
                ('implementation_date', models.DateTimeField(blank=True, null=True)),
                ('player_in', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suggestions_in', to='fpl.player')),
                ('player_out', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suggestions_out', to='fpl.player')),
                ('user_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transfer_suggestions', to='fpl.userteam')),
            ],
            options={
                'db_table': 'fpl_transfer_suggestions',
                'ordering': ['-priority_score', '-created_at'],
                'indexes': [models.Index(fields=['user_team', '-priority_score'], name='fpl_transfe_user_te_9728b2_idx'), models.Index(fields=['player_out'], name='fpl_transfe_player__2e2fa9_idx'), models.Index(fields=['player_in'], name='fpl_transfe_player__ab5d22_idx'), models.Index(fields=['-created_at'], name='fpl_transfe_created_76b4ad_idx'), models.Index(fields=['suggestion_type'], name='fpl_transfe_suggest_cd367e_idx')],
            },
        ),
        migrations.CreateModel(
            name='TeamPlayer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('purchase_price', models.DecimalField(decimal_places=1, help_text='Price when purchased', max_digits=4)),
                ('selling_price', models.DecimalField(decimal_places=1, help_text='Current selling price', max_digits=4)),
                ('is_captain', models.BooleanField(db_index=True, default=False)),
                ('is_vice_captain', models.BooleanField(db_index=True, default=False)),
                ('multiplier', models.PositiveSmallIntegerField(db_index=True, default=1, help_text='Points multiplier (1 for bench, 2 for captain)')),
                ('position', models.PositiveSmallIntegerField(help_text='Position in team (1-15)')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_selections', to='fpl.player')),
                ('user_team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='fpl.userteam')),
            ],
            options={
                'db_table': 'fpl_team_players',
                'ordering': ['user_team', '-multiplier', '-player__total_points'],
                'indexes': [models.Index(fields=['user_team', 'player'], name='fpl_team_pl_user_te_fb164b_idx'), models.Index(fields=['is_captain'], name='fpl_team_pl_is_capt_cca10d_idx'), models.Index(fields=['is_vice_captain'], name='fpl_team_pl_is_vice_024655_idx'), models.Index(fields=['multiplier'], name='fpl_team_pl_multipl_e472b5_idx')],
                'unique_together': {('user_team', 'player')},
            },
        ),
        migrations.CreateModel(
            name='PlayerGameweekPerformance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('gameweek', models.PositiveSmallIntegerField()),
                ('points', models.IntegerField(default=0)),
                ('minutes', models.PositiveSmallIntegerField(default=0)),
                ('goals_scored', models.PositiveSmallIntegerField(default=0)),
                ('assists', models.PositiveSmallIntegerField(default=0)),
                ('clean_sheets', models.PositiveSmallIntegerField(default=0)),
                ('goals_conceded', models.PositiveSmallIntegerField(default=0)),
                ('yellow_cards', models.PositiveSmallIntegerField(default=0)),
                ('red_cards', models.PositiveSmallIntegerField(default=0)),
                ('saves', models.PositiveSmallIntegerField(default=0)),
                ('bonus', models.PositiveSmallIntegerField(default=0)),
                ('bps', models.PositiveSmallIntegerField(default=0)),
                ('influence', models.DecimalField(decimal_places=1, default=0.0, max_digits=5)),
                ('creativity', models.DecimalField(decimal_places=1, default=0.0, max_digits=5)),
                ('threat', models.DecimalField(decimal_places=1, default=0.0, max_digits=5)),
                ('ict_index', models.DecimalField(decimal_places=1, default=0.0, max_digits=5)),
                ('selected', models.PositiveIntegerField(default=0, help_text='Number of teams that selected this player')),
                ('transfers_in', models.PositiveIntegerField(default=0)),
                ('transfers_out', models.PositiveIntegerField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gameweek_performances', to='fpl.player')),
            ],
            options={
                'db_table': 'fpl_player_gameweek_performance',
                'ordering': ['gameweek', '-points'],
                'indexes': [models.Index(fields=['player', 'gameweek'], name='fpl_player__player__f03c89_idx'), models.Index(fields=['gameweek', '-points'], name='fpl_player__gamewee_dd080d_idx'), models.Index(fields=['-points'], name='fpl_player__points_fc6b9d_idx')],
                'unique_together': {('player', 'gameweek')},
            },
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['fpl_id'], name='fpl_players_fpl_id_bca31a_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['position', '-total_points'], name='fpl_players_positio_3f0d07_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['team', 'position'], name='fpl_players_team_id_e70f69_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['-form', '-points_per_game'], name='fpl_players_form_c9ef01_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['current_price', 'position'], name='fpl_players_current_a802f5_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['-selected_by_percent'], name='fpl_players_selecte_65741f_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['status'], name='fpl_players_status_6a859e_idx'),
        ),
        migrations.AddIndex(
            model_name='player',
            index=models.Index(fields=['updated_at'], name='fpl_players_updated_f7aec7_idx'),
        ),
    ]
